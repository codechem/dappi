{
  "version": 3,
  "sources": ["node_modules/@angular/material/core/tokens/_m3-system.scss", "src/styles.scss", "src/_variables.scss", "node_modules/@angular/material/core/tokens/_token-utils.scss"],
  "sourcesContent": ["@use '../style/elevation';\n@use '../style/sass-utils';\n@use '../theming/config-validation';\n@use '../theming/definition';\n@use './m3/definitions';\n@use 'sass:map';\n@use 'sass:meta';\n@use 'sass:list';\n@use './m3-tokens';\n\n/// Emits necessary CSS variables for Material's system level values for the values defined in the\n/// config map. The config map can have values color, typography, and/or density.\n///\n/// If the config map's color value is an Angular Material color palette, it will be used as the\n/// primary and tertiary colors with a `color-scheme` theme type. Otherwise if the color value is a\n/// map, it must have a `primary` value containing an Angular Material color palette, and\n/// optionally a different `tertiary` palette (defaults to primary palette) and `theme-type` that\n/// is either `light`, `dark`, or 'color-scheme` (defaults to `color-scheme`). Color variable\n/// definitions will not be emitted if there are no color values in the config.\n///\n/// If the config map's typography value is a font family string, it will be used as the\n/// plain and brand font family with default bold, medium, and regular weights of 700, 500, and 400,\n/// respectfully. Otherwise if the typography value is a map, it must have a `plain-family` font\n/// family value, and optionally a different `brand-family` font family (defaults to the plain\n/// value) and weights for `bold-weight` (default: 700), `bold-weight` (default: 500), and\n/// `bold-weight` (default: 400). Typography variable definitions will not be emitted if there are\n/// no typography values in the config.\n///\n/// If the config map's density value is a number, it will be used as the density scale. Otherwise\n/// if the density value is a map, it must have a `scale` value. Density variable definitions will\n/// not be emitted if there are no density values in the config.\n///\n/// The application variables emitted use the namespace prefix \"--mat-sys\".\n/// e.g. --mat-sys-surface: #E5E5E5\n///\n/// @param {Map} $config The color configuration with optional keys color, typography, or density.\n@mixin theme($config, $overrides: ()) {\n  $color: map.get($config, color);\n  $color-config: null;\n  @if ($color) {\n    // validate-palette returns null if it is a valid M3 palette\n    $is-palette: config-validation.validate-palette($color) == null;\n\n    // Default to \"color-scheme\" theme type if the config's color does not provide one.\n    @if (not $is-palette and not map.has-key($color, theme-type)) {\n      $color: map.set($color, theme-type, color-scheme);\n    }\n\n    $color-config: if($is-palette,\n            definition.define-colors((primary: $color, theme-type: color-scheme)),\n            definition.define-colors($color));\n    @include system-level-colors($color-config, $overrides, definition.$system-fallback-prefix);\n    @include system-level-elevation($color-config, $overrides, definition.$system-fallback-prefix);\n  }\n\n  $typography: map.get($config, typography);\n  $typography-config: null;\n  @if ($typography) {\n    $typography-config: if(meta.type-of($typography) == 'map',\n      definition.define-typography($typography),\n      definition.define-typography((plain-family: $typography)));\n    @include system-level-typography(\n        $typography-config, $overrides, definition.$system-fallback-prefix);\n  }\n\n  $density: map.get($config, density);\n  $density-config: null;\n  @if ($density) {\n    $density-config: if(meta.type-of($density) == 'map',\n      definition.define-density($density),\n      definition.define-density((scale: $density)));\n    $scale: map.get($density-config, _mat-theming-internals-do-not-access, density-scale);\n    @if ($scale != 0) {\n      $all-tokens: m3-tokens.generate-density-tokens($scale);\n      @each $component-tokens in $all-tokens {\n        $namespace: list.nth($component-tokens, 1);\n        @each $tokens in list.nth($component-tokens, 2) {\n          --#{list.nth($namespace, 1)}-#{list.nth($namespace, 2)}-#{\n              list.nth($tokens, 1)}: #{list.nth($tokens, 2)};\n        }\n      }\n    }\n  }\n\n  @include system-level-shape($overrides: $overrides, $prefix: definition.$system-fallback-prefix);\n  @include system-level-state($overrides: $overrides, $prefix: definition.$system-fallback-prefix);\n}\n\n/// Emits the system-level CSS variables for each of the provided override values. E.g. to\n/// change the primary color to red, use `mat.theme-overrides((primary: red));`\n@mixin theme-overrides($overrides, $prefix: definition.$system-fallback-prefix) {\n  $sys-names: map-merge-all(\n      definitions.md-sys-color-values-light(),\n      definitions.md-sys-typescale-values(),\n      definitions.md-sys-elevation-values(),\n      definitions.md-sys-shape-values(),\n      definitions.md-sys-state-values());\n\n  & {\n    @each $name, $value in $overrides {\n      @if (map.has-key($sys-names, $name)) {\n        --#{$prefix}-#{$name}: #{map.get($overrides, $name)};\n      }\n    }\n  }\n}\n\n@mixin system-level-colors($theme, $overrides: (), $prefix: null) {\n  $palettes: map.get($theme, _mat-theming-internals-do-not-access, palettes);\n  $base-palettes: (\n    neutral: map.get($palettes, neutral),\n    neutral-variant: map.get($palettes, neutral-variant),\n    secondary: map.get($palettes, secondary),\n    error: map.get($palettes, error),\n  );\n\n  $type: map.get($theme, _mat-theming-internals-do-not-access, theme-type);\n  $primary: map.merge(map.get($palettes, primary), $base-palettes);\n  $tertiary: map.merge(map.get($palettes, tertiary), $base-palettes);\n  $error: map.get($palettes, error);\n\n  @if (not $prefix) {\n    $prefix: map.get($theme, _mat-theming-internals-do-not-access,\n        color-system-variables-prefix) or definition.$system-level-prefix;\n  }\n\n  $ref: (\n    md-ref-palette: m3-tokens.generate-ref-palette-tokens($primary, $tertiary, $error)\n  );\n\n  $sys-colors: _generate-sys-colors($ref, $type);\n\n  // Manually insert a subset of palette values that are used directly by components\n  // instead of system variables.\n  $sys-colors: map.set($sys-colors,\n    'neutral-variant20', map.get($ref, md-ref-palette, neutral-variant20));\n  $sys-colors: map.set($sys-colors,\n    'neutral10', map.get($ref, md-ref-palette, neutral10));\n\n  & {\n    @each $name, $value in $sys-colors {\n      --#{$prefix}-#{$name}: #{map.get($overrides, $name) or $value};\n    }\n  }\n}\n\n@function _generate-sys-colors($ref, $type) {\n  $light-sys-colors: definitions.md-sys-color-values-light($ref);\n  @if ($type == light) {\n    @return $light-sys-colors;\n  }\n\n  $dark-sys-colors: definitions.md-sys-color-values-dark($ref);\n  @if ($type == dark) {\n    @return $dark-sys-colors;\n  }\n\n  @if ($type == color-scheme) {\n    $light-dark-sys-colors: ();\n    @each $name, $light-value in $light-sys-colors {\n      $dark-value: map.get($dark-sys-colors, $name);\n      $light-dark-sys-colors:\n          map.set($light-dark-sys-colors, $name, light-dark($light-value, $dark-value));\n    }\n    @return $light-dark-sys-colors;\n  }\n\n  @error 'Unknown theme-type provided: #{$type}';\n}\n\n@mixin system-level-typography($theme, $overrides: (), $prefix: null) {\n  $font-definition: map.get($theme, _mat-theming-internals-do-not-access, font-definition);\n  $brand: map.get($font-definition, brand);\n  $plain: map.get($font-definition, plain);\n  $bold: map.get($font-definition, bold);\n  $medium: map.get($font-definition, medium);\n  $regular: map.get($font-definition, regular);\n  $ref: (md-ref-typeface:\n      m3-tokens.generate-ref-typeface-tokens($brand, $plain, $bold, $medium, $regular)\n  );\n\n  @if (not $prefix) {\n    $prefix: map.get($theme, _mat-theming-internals-do-not-access,\n        typography-system-variables-prefix) or definition.$system-level-prefix;\n  }\n\n  & {\n    @each $name, $value in definitions.md-sys-typescale-values($ref) {\n      --#{$prefix}-#{$name}: #{map.get($overrides, $name) or $value};\n    }\n  }\n}\n\n@mixin system-level-elevation($theme, $overrides: (), $prefix: definition.$system-level-prefix) {\n  $shadow-color: map.get(\n      $theme, _mat-theming-internals-do-not-access, color-tokens, (mdc, theme), shadow);\n\n  @each $name, $value in definitions.md-sys-elevation-values() {\n    $level: map.get($overrides, $name) or $value;\n    $value: elevation.get-box-shadow($level, $shadow-color);\n    & {\n      --#{$prefix}-#{$name}: #{$value};\n    }\n  }\n}\n\n@mixin system-level-shape($theme: (), $overrides: (), $prefix: definition.$system-level-prefix) {\n  & {\n    @each $name, $value in definitions.md-sys-shape-values() {\n      --#{$prefix}-#{$name}: #{map.get($overrides, $name) or $value};\n    }\n  }\n}\n\n@mixin system-level-state($theme: (), $overrides: (), $prefix: definition.$system-level-prefix) {\n  & {\n    @each $name, $value in definitions.md-sys-state-values() {\n      --#{$prefix}-#{$name}: #{map.get($overrides, $name) or $value};\n    }\n  }\n}\n\n// Return a new map where the values are the same as the provided map's\n// keys, prefixed with \"--mat-sys-\". For example:\n// (key1: '', key2: '') --> (key1: --mat-sys-key1, key2: --mat-sys-key2)\n@function _create-system-app-vars-map($map) {\n  $new-map: ();\n  @each $key, $value in $map {\n    $new-map: map.set($new-map, $key, --#{definition.$system-fallback-prefix}-#{$key});\n  }\n  @return $new-map;\n}\n\n// Create a components tokens map where values are based on\n// system fallback variables referencing Material's system keys.\n// Includes density token fallbacks where density is 0.\n@function create-system-fallbacks() {\n  $app-vars: (\n    'md-sys-color':\n        _create-system-app-vars-map(definitions.md-sys-color-values-light()),\n    'md-sys-typescale':\n        _create-system-app-vars-map(definitions.md-sys-typescale-values()),\n    'md-sys-elevation':\n        _create-system-app-vars-map(definitions.md-sys-elevation-values()),\n    'md-sys-state':\n        _create-system-app-vars-map(definitions.md-sys-state-values()),\n    'md-sys-shape':\n        _create-system-app-vars-map(definitions.md-sys-shape-values()),\n    // Add a subset of palette-specific colors used by components instead of system values\n    'md-ref-palette':\n        _create-system-app-vars-map(\n          (\n            neutral10: '', // Form field native select option text color\n            neutral-variant20: '', // Sidenav scrim (container background shadow when opened),\n          )\n        ),\n  );\n\n  @return sass-utils.deep-merge-all(\n      m3-tokens.generate-tokens($app-vars, true, true),\n      m3-tokens.generate-density-tokens(0)\n  );\n}\n\n/// Creates a single merged map from the provided variable-length map arguments\n@function map-merge-all($maps...) {\n  $result: ();\n  @each $map in $maps {\n    $result: map.merge($result, $map);\n  }\n  @return $result;\n}\n", "@use '@angular/material' as mat;\r\n@use './variables' as vars;\r\n\r\nhtml {\r\n  @include mat.theme(\r\n    (\r\n      color: (\r\n        theme-type: light,\r\n        primary: mat.$azure-palette,\r\n        tertiary: mat.$blue-palette,\r\n      ),\r\n      typography: Roboto,\r\n      density: 0,\r\n    )\r\n  );\r\n}\r\n\r\nhtml,\r\nbody {\r\n  height: 100%;\r\n}\r\nbody {\r\n  margin: 0;\r\n  font-family: Roboto, 'Helvetica Neue', sans-serif;\r\n}\r\n\r\n:root {\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n\r\n  .mat-mdc-select-value {\r\n    color: vars.$text-primary;\r\n  }\r\n\r\n  .mat-mdc-dialog-surface {\r\n    border-radius: 8px;\r\n  }\r\n\r\n  mat-dialog-container {\r\n    max-height: 80vh;\r\n  }\r\n  ::-webkit-scrollbar {\r\n    width: 6px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background-color: rgba(vars.$primary-main, 0.3) !important;\r\n    border-radius: 3px;\r\n  }\r\n  ::-webkit-scrollbar-track {\r\n    background: green;\r\n  }\r\n  * {\r\n    scrollbar-width: thin;\r\n    scrollbar-color: rgba(vars.$primary-main, 0.3) transparent;\r\n  }\r\n  @include mat.form-field-overrides(\r\n    (\r\n      outlined-label-text-color: rgba(#ffffff, 0.7),\r\n      outlined-hover-label-text-color: rgba(#ffffff, 0.7),\r\n      outlined-input-text-color: vars.$text-primary,\r\n      filled-hover-label-text-color: rgba(#ffffff, 0.7),\r\n      filled-focus-active-indicator-color: rgba(#ffffff, 0.7),\r\n      outlined-hover-outline-color: rgba(vars.$primary-main, 1),\r\n      filled-active-indicator-color: rgba(vars.$primary-main, 1),\r\n      outlined-focus-outline-color: rgba(vars.$primary-main, 1),\r\n      outlined-focus-label-text-color: rgba(vars.$primary-main, 1),\r\n      filled-error-hover-label-text-color: vars.$error-light,\r\n      filled-error-focus-label-text-color: vars.$error-light,\r\n      filled-error-label-text-color: vars.$error-light,\r\n      filled-error-caret-color: vars.$error-light,\r\n      filled-error-active-indicator-color: vars.$error-light,\r\n      filled-error-focus-active-indicator-color: vars.$error-light,\r\n      filled-error-hover-active-indicator-color: vars.$error-light,\r\n      outlined-error-caret-color: vars.$error-light,\r\n      outlined-error-focus-label-text-color: vars.$error-light,\r\n      outlined-error-label-text-color: vars.$error-light,\r\n      outlined-error-hover-label-text-color: vars.$error-light,\r\n      outlined-error-focus-outline-color: vars.$error-light,\r\n      outlined-error-hover-outline-color: vars.$error-light,\r\n      outlined-error-outline-color: vars.$error-light,\r\n      error-text-color: vars.$error-light,\r\n      error-focus-trailing-icon-color: vars.$error-light,\r\n      error-hover-trailing-icon-color: vars.$error-light,\r\n      error-trailing-icon-color: vars.$error-light,\r\n      filled-input-text-color: vars.$text-primary,\r\n      filled-input-text-placeholder-color: vars.$text-primary,\r\n      filled-focus-label-text-color: vars.$text-primary,\r\n      filled-label-text-color: vars.$text-primary,\r\n      filled-disabled-label-text-color: vars.$text-primary,\r\n      outlined-disabled-label-text-color: vars.$text-primary,\r\n      outlined-input-text-placeholder-color: vars.$text-primary,\r\n      select-option-text-color: vars.$text-primary,\r\n    )\r\n  );\r\n\r\n  @include mat.checkbox-overrides(\r\n    (\r\n      unselected-icon-color: rgba(#ffffff, 0.56),\r\n      unselected-focus-icon-color: rgba(#ffffff, 0.56),\r\n      selected-pressed-icon-color: rgba(vars.$primary-main, 1),\r\n      selected-icon-color: rgba(vars.$primary-main, 1),\r\n      selected-focus-icon-color: rgba(vars.$primary-main, 1),\r\n      selected-hover-icon-color: rgba(vars.$primary-main, 1),\r\n      unselected-hover-icon-color: rgba(#ffffff, 0.56),\r\n      selected-checkmark-color: vars.$background-default,\r\n      selected-hover-state-layer-color: vars.$background-default,\r\n      unselected-pressed-state-layer-color: vars.$background-default,\r\n      unselected-hover-state-layer-color: vars.$background-default,\r\n      selected-pressed-state-layer-color: vars.$background-default,\r\n      selected-focus-state-layer-color: vars.$background-default,\r\n      unselected-focus-state-layer-color: vars.$background-default,\r\n      selected-hover-state-layer-opacity: 1,\r\n      unselected-hover-state-layer-opacity: 1,\r\n      selected-focus-state-layer-opacity: 0,\r\n      unselected-pressed-state-layer-opacity: 0,\r\n      selected-pressed-state-layer-opacity: 0,\r\n      label-text-color: vars.$text-primary,\r\n    )\r\n  );\r\n\r\n  @include mat.progress-spinner-overrides(\r\n    (\r\n      active-indicator-color: vars.$primary-main,\r\n    )\r\n  );\r\n\r\n  @include mat.dialog-overrides(\r\n    (\r\n      container-color: vars.$background-paper-elevation-1,\r\n    )\r\n  );\r\n}\r\n:root {\r\n  background-color: vars.$background-default;\r\n}\r\n\r\nhr {\r\n  width: 100%;\r\n  border-color: vars.$background-hover;\r\n}\r\n\r\n.floating-menu-container {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 1000;\r\n  pointer-events: none;\r\n}\r\n\r\n.floating-menu {\r\n  position: absolute;\r\n  z-index: 1001;\r\n  pointer-events: auto;\r\n  background-color: vars.$background-paper-elevation-8;\r\n  border-radius: 4px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);\r\n}\r\n", "@use '@angular/material' as mat;\r\n\r\n$background-default: #121212;\r\n$background-paper-elevation-1: #1e1e1e;\r\n$background-paper-elevation-2: #232323;\r\n$background-paper-elevation-8: #2e2e2e;\r\n$background-hover: rgba(255, 255, 255, 0.2);\r\n\r\n$primary-main: #ac99ea;\r\n$info-main: #29b6f6;\r\n$success-main: #66bb6a;\r\n$primary-outlined-border: 1px solid\r\n  rgba(\r\n    $color: #d5ccf5,\r\n    $alpha: 0.5,\r\n  );\r\n$primary-selected: rgba(#d5ccf5, 0.16);\r\n$primary-focus: rgba(#d5ccf5, 0.12);\r\n$primary-contrast-text: #212121;\r\n$text-primary: #ffffff;\r\n$text-secondary: rgba(\r\n  $color: #ffffff,\r\n  $alpha: 0.7,\r\n);\r\n\r\n$divider: 1px solid rgba(#ffffff, 0.12);\r\n\r\n$action-active: rgba(#ffffff, 0.56);\r\n$action-disabled-background: rgba(\r\n  $color: #ffffff,\r\n  $alpha: 0.12,\r\n);\r\n$action-disabled: rgba(\r\n  $color: #ffffff,\r\n  $alpha: 0.38,\r\n);\r\n\r\n$error-light: #ef5350;\r\n\r\n$default-enabled-border: #616161;\r\n", "@use '../style/elevation';\n@use '../style/sass-utils';\n@use './m3-system';\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:string';\n\n$_tokens: null;\n$_component-prefix: null;\n$_system-fallbacks: m3-system.create-system-fallbacks();\n\n// Sets the token prefix and map to use when creating token slots.\n@mixin use-tokens($prefix, $tokens) {\n  $_component-prefix: $prefix !global;\n  $_tokens: $tokens !global;\n\n  @content;\n\n  $_component-prefix: null !global;\n  $_tokens: null !global;\n}\n\n// Combines a prefix and a string to generate a CSS variable name for a token.\n@function _create-var-name($prefix, $token) {\n  @if $prefix == null or $token == null {\n    @error 'Must specify both prefix and name when generating token';\n  }\n\n  $string-prefix: '';\n\n  // Prefixes are lists so we need to combine them.\n  @each $part in $prefix {\n    $string-prefix: if($string-prefix == '', $part, '#{$string-prefix}-#{$part}');\n  }\n\n  @return string.unquote('--#{$string-prefix}-#{$token}');\n}\n\n// Creates a CSS variable, including the fallback if provided.\n@function _create-var($name, $fallback: null) {\n  @if ($fallback) {\n    @return var($name, $fallback);\n  } @else {\n    @return var($name);\n  }\n}\n\n// Gets the value of the token given the current global context state.\n@function _get-token-value($token, $fallback) {\n  $var-name: _create-var-name($_component-prefix, $token);\n  $fallback: _get-token-fallback($token, $fallback);\n  @return _create-var($var-name, $fallback);\n}\n\n// Assertion mixin that throws an error if the global state has not been set up by wrapping\n// calls with `use-tokens`.\n@function _assert-use-tokens($token) {\n  @if $_component-prefix == null or $_tokens == null {\n    @error 'Function was not called within a wrapping call of `use-tokens`';\n  }\n  @if not map.has-key($_tokens, $token) {\n    @error 'Token #{$token} does not exist. Configured tokens are: #{map.keys($_tokens)}';\n  }\n\n  @return true;\n}\n\n// Emits a slot for the given token, provided that it has a non-null value in the token map passed\n// to `use-tokens`.\n// Accepts an optional fallback parameter to include in the CSS variable.\n// If $fallback is `true`, then use the tokens map to get the fallback.\n// TODO: Remove the use case where we accept \"true\" and handle any failing client screenshots\n@mixin create-token-slot($property, $token, $fallback: null) {\n  $_assert: _assert-use-tokens($token);\n  @if map.get($_tokens, $token) != null {\n    #{$property}: #{_get-token-value($token, $fallback)};\n  }\n}\n\n// Returns the name of a token including the current prefix. Intended to be used in calculations\n// involving tokens. `create-token-slot` should be used when outputting tokens.\n@function get-token-variable-name($token) {\n  $_assert: _assert-use-tokens($token);\n  @return _create-var-name($_component-prefix, $token);\n}\n\n// Returns a `var()` reference to a specific token. Intended for declarations\n// where the token has to be referenced as a part of a larger expression.\n// Accepts an optional fallback parameter to include in the CSS variable.\n// If $fallback is `true`, then use the tokens map to get the fallback.\n// TODO: Remove the use case where we accept \"true\" and handle any failing client screenshots\n@function get-token-variable($token, $fallback: null) {\n  $_assert: _assert-use-tokens($token);\n  @return _get-token-value($token, $fallback);\n}\n\n// Gets the token's fallback value. Prefers adding a system-level fallback if one exists, otherwise\n// use the provided fallback.\n@function _get-token-fallback($token, $fallback: null) {\n  // If the $fallback is `true`, this is the component's signal to use the current token map value\n  @if ($fallback == true) {\n    $fallback: map.get($_tokens, $token);\n  }\n\n  // Check whether there's a system-level fallback. If not, return the optional\n  // provided fallback (otherwise null).\n  $sys-fallback: map.get($_system-fallbacks, $_component-prefix, $token);\n  @if (not $sys-fallback) {\n    @return $fallback;\n  }\n\n  @if (sass-utils.is-css-var-name($sys-fallback)) {\n    @return _create-var($sys-fallback, $fallback);\n  }\n\n  @return $sys-fallback;\n}\n\n// Outputs a map of tokens under a specific prefix.\n@mixin create-token-values($prefix, $tokens) {\n  @if $tokens != null {\n    // TODO: The `&` adds to the file size of theme, but it's necessary for compatibility\n    // with https://sass-lang.com/documentation/breaking-changes/mixed-decls/. We should\n    // figure out a better way to do this or move all the concrete styles out of the theme.\n    & {\n      @each $key, $value in $tokens {\n        @if $value != null {\n          #{_create-var-name($prefix, $key)}: #{$value};\n        }\n      }\n    }\n  }\n}\n\n// MDC doesn't currently handle elevation tokens properly. As a temporary workaround we can combine\n// the elevation and shadow-color tokens into a full box-shadow and use it as the value for the\n// elevation token.\n@function resolve-elevation($tokens, $elevation-token, $shadow-color-token) {\n  $elevation: map.get($tokens, $elevation-token);\n  $shadow-color: map.get($tokens, $shadow-color-token);\n  @return map.merge(\n    $tokens,\n    (\n      $elevation-token: elevation.get-box-shadow($elevation, $shadow-color),\n      $shadow-color-token: null,\n    )\n  );\n}\n\n/// Checks whether a list starts wih a given prefix\n/// @param {List} $list The list value to check the prefix of.\n/// @param {List} $prefix The prefix to check.\n/// @return {Boolean} Whether the list starts with the prefix.\n@function _is-prefix($list, $prefix) {\n  @for $i from 1 through list.length($prefix) {\n    @if list.nth($list, $i) != list.nth($prefix, $i) {\n      @return false;\n    }\n  }\n  @return true;\n}\n\n/// Gets the supported color variants in the given token set for the given prefix.\n/// @param {Map} $tokens The full token map.\n/// @param {List} $prefix The component prefix to get color variants for.\n/// @return {List} The supported color variants.\n@function _supported-color-variants($tokens, $prefix) {\n  $result: ();\n  @each $namespace in map.keys($tokens) {\n    @if list.length($prefix) == list.length($namespace) - 1 and _is-prefix($namespace, $prefix) {\n      $result: list.append($result, list.nth($namespace, list.length($namespace)), comma);\n    }\n  }\n  @return $result;\n}\n\n/// Gets the token values for the given components prefix with the given options.\n/// @param {Map} $tokens The full token map.\n/// @param {List} $prefix The component prefix to get the token values for.\n/// @param {ArgList} Any additional options\n///   Currently the additional supported options are:\n//     - $color-variant - The color variant to use for the component\n//     - $emit-overrides-only - Whether to emit *only* the overrides for the\n//                              specific color variant, or all color styles. Defaults to false.\n/// @throws If given options are invalid\n/// @return {Map} The token values for the requested component.\n@function get-tokens-for($tokens, $prefix, $options...) {\n  $options: sass-utils.validate-keyword-args($options, (color-variant, emit-overrides-only));\n  @if $tokens == () {\n    @return ();\n  }\n  $values: map.get($tokens, $prefix);\n  $color-variant: map.get($options, color-variant);\n  $emit-overrides-only: map.get($options, emit-overrides-only);\n  @if $color-variant == null {\n    @return $values;\n  }\n  $overrides: map.get($tokens, list.append($prefix, $color-variant));\n  @if $overrides == null {\n    $variants: _supported-color-variants($tokens, $prefix);\n    $secondary-message: if(\n      $variants == (),\n      'Mixin does not support color variants',\n      'Supported color variants are: #{$variants}'\n    );\n\n    @error 'Invalid color variant: #{$color-variant}. #{$secondary-message}.';\n  }\n  @return if($emit-overrides-only, $overrides, map.merge($values, $overrides));\n}\n\n/// Emits new token values for the given token overrides.\n/// Verifies that the overrides passed in are valid tokens.\n/// New token values are emitted under the current selector or root.\n@mixin batch-create-token-values($overrides: (), $namespace-configs...) {\n  @include sass-utils.current-selector-or-root() {\n    $prefixed-name-data: ();\n    $unprefixed-name-data: ();\n    $all-names: ();\n\n    @each $config in $namespace-configs {\n      $namespace: map.get($config, namespace);\n      $prefix: if(map.has-key($config, prefix), map.get($config, prefix), '');\n      $tokens: _filter-nulls(map.get($config, tokens));\n      @each $name, $value in $tokens {\n        $prefixed-name: $prefix + $name;\n        $all-names: list.append($all-names, $prefixed-name, $separator: comma);\n        @if map.has-key($prefixed-name-data, $prefixed-name) {\n          @error #{\n          'Error overriding token: Ambiguous token name `'\n        }#{\n          $prefixed-name\n        }#{\n          '` exists in multiple namespaces: `('\n        }#{\n          list.nth(map.get($prefixed-name-data, $prefixed-name), 1)\n        }#{\n          ')` and `('\n        }#{\n          $namespace\n        }#{\n          ')`'\n        };\n        }\n        $prefixed-name-data: map.set($prefixed-name-data, $prefixed-name, ($namespace, $name));\n        $unprefixed-data: map.has-key($unprefixed-name-data, $name) and\n          map.get($unprefixed-name-data, $name) or\n          ();\n        $unprefixed-data: list.append($unprefixed-data, ($namespace, $prefixed-name));\n        $unprefixed-name-data: map.set($unprefixed-name-data, $name, $unprefixed-data);\n      }\n    }\n\n    @each $name, $value in $overrides {\n      @if map.has-key($prefixed-name-data, $name) {\n        $data: map.get($prefixed-name-data, $name);\n        $namespace: list.nth($data, 1);\n        $name: list.nth($data, 2);\n        @include create-token-values(\n          $namespace,\n          (\n            $name: $value,\n          )\n        );\n      } @else if (map.has-key($unprefixed-name-data, $name)) {\n        $datalist: map.get($unprefixed-name-data, $name);\n        $prefixed-names: ();\n        @each $data in $datalist {\n          $namespace: list.nth($data, 1);\n          $prefixed-names: list.append($prefixed-names, list.nth($data, 2), $separator: comma);\n          @include create-token-values(\n            $namespace,\n            (\n              $name: $value,\n            )\n          );\n        }\n        @warn #{\n        'Token `'\n      }#{\n        $name\n      }#{\n        '` is deprecated. Please use one of the following alternatives: '\n      }#{\n        $prefixed-names\n      };\n      } @else {\n        @error #{'Invalid token name `'}#{$name}#{'`. '}#{'Valid tokens are: '}#{$all-names};\n      }\n    }\n  }\n}\n\n/// Filters keys with a null value out of the map.\n/// @param {Map} $map The map to filter.\n/// @return {Map} The given map with all of the null keys filtered out.\n@function _filter-nulls($map) {\n  $result: ();\n  @each $key, $val in $map {\n    @if $val != null {\n      $result: map.set($result, $key, $val);\n    }\n  }\n  @return $result;\n}\n"],
  "mappings": "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",
  "names": []
}
